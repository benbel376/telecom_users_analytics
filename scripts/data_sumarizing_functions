
def get_top_n(df, colname, num, globalDict):
    """
    a function that groups a column and return the top n groups based on member count
    """
    queryDf = lambda q: sqldf(q, globalDict)
    query = 'SELECT "'+colname+'", count(*) as user_count FROM '+df+' WHERE "'+colname+'" != "undefined" group by "'+colname+'" order by user_count DESC LIMIT '+str(num)
    return queryDf(query)


def manByHandset(lis, dfname):
    """
    a function that returns top three handsets from top three manufacturers
    """
    for man in lis:
        query = 'SELECT "Handset Manufacturer", "Handset Type", count(*) as num_users \
        FROM '+dfname+'\
        WHERE "Handset Manufacturer" = "'+man+'" \
        group by "Handset Type" \
        order by num_users DESC \
        LIMIT 3'
        print(queryDf(query),'\n')


def find_agg(df, group_columns, agg_columns, agg_metrics, new_columns):
    """
    a function that returns a new dataframe with aggregate values of specified columns.
    """
    new_column_dict ={}
    agg_dict = {}
    for i in range(len(agg_columns)):
        new_column_dict[agg_columns[i]] = new_columns[i]
        agg_dict[agg_columns[i]] = agg_metrics[i]

    new_df = df.groupby(group_columns).agg(agg_dict).reset_index().rename(columns=new_column_dict)
    return new_df


def combineColumns(df, col1, col2, new_name, rem=False):
    """
    combines two numerical variables and create new variable.
    """
    df[new_name] = df[col1]+df[col2]
    if(rem):
        df.drop([col1, col2], axis = 1, inplace = True)


def generateFreqTable(df, cols, range):
    """
    generate a freqeuncy table
    """
    for col in cols:
        print(df[col].value_counts().iloc[:range,])


def summary_one(df, cols):
    """
    calculate range, max, count, and min.
    """
    df2 = df[cols]
    
    df_sum = df2.max().to_frame().reset_index().rename(columns={"index":"variables",0:"max"})
    df_sum["min"] = df2.min().to_frame().reset_index().iloc[:,1]
    df_sum['range'] = df_sum['max'] - df_sum['min']
    df_sum["count"] = df2.count().to_frame().reset_index().iloc[:,1]
    return df_sum


def summary_two(df, cols):
    """
    calculate central tendency measures.
    """
    df2 = df[cols]
    df_sum = df2.mean().to_frame().reset_index().rename(columns={"index":"variables",0:"mean"})
    df_sum["median"] = df2.median().to_frame().reset_index().iloc[:,1]
    df_sum["mode"] = df2.mode().iloc[:,1]
    return df_sum


def summary_three(df, cols):
    """
    calculate dispersion measures
    """
    df2 = df[cols]
    df_sum = df2.std().to_frame().reset_index().rename(columns={"index":"variables",0:"std"})
    df_sum["var"] = df2.var().to_frame().reset_index().iloc[:,1]
    return df_sum